/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package eu.ideata.streaming.core;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class UserInfoWithCategory extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2623986628658185756L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UserInfoWithCategory\",\"namespace\":\"eu.ideata.streaming.core\",\"fields\":[{\"name\":\"userId\",\"type\":\"string\"},{\"name\":\"category\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"booleanFlag\",\"type\":\"boolean\"},{\"name\":\"subCategory\",\"type\":\"string\"},{\"name\":\"someValue\",\"type\":\"float\"},{\"name\":\"intValue\",\"type\":\"int\"},{\"name\":\"updated\",\"type\":\"long\"},{\"name\":\"streamingSource\",\"type\":\"string\"},{\"name\":\"readTimeStamp\",\"type\":[\"null\",\"long\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence userId;
  @Deprecated public java.lang.CharSequence category;
  @Deprecated public long timestamp;
  @Deprecated public boolean booleanFlag;
  @Deprecated public java.lang.CharSequence subCategory;
  @Deprecated public float someValue;
  @Deprecated public int intValue;
  @Deprecated public long updated;
  @Deprecated public java.lang.CharSequence streamingSource;
  @Deprecated public java.lang.Long readTimeStamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public UserInfoWithCategory() {}

  /**
   * All-args constructor.
   * @param userId The new value for userId
   * @param category The new value for category
   * @param timestamp The new value for timestamp
   * @param booleanFlag The new value for booleanFlag
   * @param subCategory The new value for subCategory
   * @param someValue The new value for someValue
   * @param intValue The new value for intValue
   * @param updated The new value for updated
   * @param streamingSource The new value for streamingSource
   * @param readTimeStamp The new value for readTimeStamp
   */
  public UserInfoWithCategory(java.lang.CharSequence userId, java.lang.CharSequence category, java.lang.Long timestamp, java.lang.Boolean booleanFlag, java.lang.CharSequence subCategory, java.lang.Float someValue, java.lang.Integer intValue, java.lang.Long updated, java.lang.CharSequence streamingSource, java.lang.Long readTimeStamp) {
    this.userId = userId;
    this.category = category;
    this.timestamp = timestamp;
    this.booleanFlag = booleanFlag;
    this.subCategory = subCategory;
    this.someValue = someValue;
    this.intValue = intValue;
    this.updated = updated;
    this.streamingSource = streamingSource;
    this.readTimeStamp = readTimeStamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return userId;
    case 1: return category;
    case 2: return timestamp;
    case 3: return booleanFlag;
    case 4: return subCategory;
    case 5: return someValue;
    case 6: return intValue;
    case 7: return updated;
    case 8: return streamingSource;
    case 9: return readTimeStamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: userId = (java.lang.CharSequence)value$; break;
    case 1: category = (java.lang.CharSequence)value$; break;
    case 2: timestamp = (java.lang.Long)value$; break;
    case 3: booleanFlag = (java.lang.Boolean)value$; break;
    case 4: subCategory = (java.lang.CharSequence)value$; break;
    case 5: someValue = (java.lang.Float)value$; break;
    case 6: intValue = (java.lang.Integer)value$; break;
    case 7: updated = (java.lang.Long)value$; break;
    case 8: streamingSource = (java.lang.CharSequence)value$; break;
    case 9: readTimeStamp = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public java.lang.CharSequence getUserId() {
    return userId;
  }

  /**
   * Sets the value of the 'userId' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.CharSequence value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'category' field.
   * @return The value of the 'category' field.
   */
  public java.lang.CharSequence getCategory() {
    return category;
  }

  /**
   * Sets the value of the 'category' field.
   * @param value the value to set.
   */
  public void setCategory(java.lang.CharSequence value) {
    this.category = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'booleanFlag' field.
   * @return The value of the 'booleanFlag' field.
   */
  public java.lang.Boolean getBooleanFlag() {
    return booleanFlag;
  }

  /**
   * Sets the value of the 'booleanFlag' field.
   * @param value the value to set.
   */
  public void setBooleanFlag(java.lang.Boolean value) {
    this.booleanFlag = value;
  }

  /**
   * Gets the value of the 'subCategory' field.
   * @return The value of the 'subCategory' field.
   */
  public java.lang.CharSequence getSubCategory() {
    return subCategory;
  }

  /**
   * Sets the value of the 'subCategory' field.
   * @param value the value to set.
   */
  public void setSubCategory(java.lang.CharSequence value) {
    this.subCategory = value;
  }

  /**
   * Gets the value of the 'someValue' field.
   * @return The value of the 'someValue' field.
   */
  public java.lang.Float getSomeValue() {
    return someValue;
  }

  /**
   * Sets the value of the 'someValue' field.
   * @param value the value to set.
   */
  public void setSomeValue(java.lang.Float value) {
    this.someValue = value;
  }

  /**
   * Gets the value of the 'intValue' field.
   * @return The value of the 'intValue' field.
   */
  public java.lang.Integer getIntValue() {
    return intValue;
  }

  /**
   * Sets the value of the 'intValue' field.
   * @param value the value to set.
   */
  public void setIntValue(java.lang.Integer value) {
    this.intValue = value;
  }

  /**
   * Gets the value of the 'updated' field.
   * @return The value of the 'updated' field.
   */
  public java.lang.Long getUpdated() {
    return updated;
  }

  /**
   * Sets the value of the 'updated' field.
   * @param value the value to set.
   */
  public void setUpdated(java.lang.Long value) {
    this.updated = value;
  }

  /**
   * Gets the value of the 'streamingSource' field.
   * @return The value of the 'streamingSource' field.
   */
  public java.lang.CharSequence getStreamingSource() {
    return streamingSource;
  }

  /**
   * Sets the value of the 'streamingSource' field.
   * @param value the value to set.
   */
  public void setStreamingSource(java.lang.CharSequence value) {
    this.streamingSource = value;
  }

  /**
   * Gets the value of the 'readTimeStamp' field.
   * @return The value of the 'readTimeStamp' field.
   */
  public java.lang.Long getReadTimeStamp() {
    return readTimeStamp;
  }

  /**
   * Sets the value of the 'readTimeStamp' field.
   * @param value the value to set.
   */
  public void setReadTimeStamp(java.lang.Long value) {
    this.readTimeStamp = value;
  }

  /**
   * Creates a new UserInfoWithCategory RecordBuilder.
   * @return A new UserInfoWithCategory RecordBuilder
   */
  public static eu.ideata.streaming.core.UserInfoWithCategory.Builder newBuilder() {
    return new eu.ideata.streaming.core.UserInfoWithCategory.Builder();
  }

  /**
   * Creates a new UserInfoWithCategory RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UserInfoWithCategory RecordBuilder
   */
  public static eu.ideata.streaming.core.UserInfoWithCategory.Builder newBuilder(eu.ideata.streaming.core.UserInfoWithCategory.Builder other) {
    return new eu.ideata.streaming.core.UserInfoWithCategory.Builder(other);
  }

  /**
   * Creates a new UserInfoWithCategory RecordBuilder by copying an existing UserInfoWithCategory instance.
   * @param other The existing instance to copy.
   * @return A new UserInfoWithCategory RecordBuilder
   */
  public static eu.ideata.streaming.core.UserInfoWithCategory.Builder newBuilder(eu.ideata.streaming.core.UserInfoWithCategory other) {
    return new eu.ideata.streaming.core.UserInfoWithCategory.Builder(other);
  }

  /**
   * RecordBuilder for UserInfoWithCategory instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UserInfoWithCategory>
    implements org.apache.avro.data.RecordBuilder<UserInfoWithCategory> {

    private java.lang.CharSequence userId;
    private java.lang.CharSequence category;
    private long timestamp;
    private boolean booleanFlag;
    private java.lang.CharSequence subCategory;
    private float someValue;
    private int intValue;
    private long updated;
    private java.lang.CharSequence streamingSource;
    private java.lang.Long readTimeStamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(eu.ideata.streaming.core.UserInfoWithCategory.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.userId)) {
        this.userId = data().deepCopy(fields()[0].schema(), other.userId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.category)) {
        this.category = data().deepCopy(fields()[1].schema(), other.category);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.booleanFlag)) {
        this.booleanFlag = data().deepCopy(fields()[3].schema(), other.booleanFlag);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.subCategory)) {
        this.subCategory = data().deepCopy(fields()[4].schema(), other.subCategory);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.someValue)) {
        this.someValue = data().deepCopy(fields()[5].schema(), other.someValue);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.intValue)) {
        this.intValue = data().deepCopy(fields()[6].schema(), other.intValue);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.updated)) {
        this.updated = data().deepCopy(fields()[7].schema(), other.updated);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.streamingSource)) {
        this.streamingSource = data().deepCopy(fields()[8].schema(), other.streamingSource);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.readTimeStamp)) {
        this.readTimeStamp = data().deepCopy(fields()[9].schema(), other.readTimeStamp);
        fieldSetFlags()[9] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing UserInfoWithCategory instance
     * @param other The existing instance to copy.
     */
    private Builder(eu.ideata.streaming.core.UserInfoWithCategory other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.userId)) {
        this.userId = data().deepCopy(fields()[0].schema(), other.userId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.category)) {
        this.category = data().deepCopy(fields()[1].schema(), other.category);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.booleanFlag)) {
        this.booleanFlag = data().deepCopy(fields()[3].schema(), other.booleanFlag);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.subCategory)) {
        this.subCategory = data().deepCopy(fields()[4].schema(), other.subCategory);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.someValue)) {
        this.someValue = data().deepCopy(fields()[5].schema(), other.someValue);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.intValue)) {
        this.intValue = data().deepCopy(fields()[6].schema(), other.intValue);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.updated)) {
        this.updated = data().deepCopy(fields()[7].schema(), other.updated);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.streamingSource)) {
        this.streamingSource = data().deepCopy(fields()[8].schema(), other.streamingSource);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.readTimeStamp)) {
        this.readTimeStamp = data().deepCopy(fields()[9].schema(), other.readTimeStamp);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public java.lang.CharSequence getUserId() {
      return userId;
    }

    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public eu.ideata.streaming.core.UserInfoWithCategory.Builder setUserId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.userId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public eu.ideata.streaming.core.UserInfoWithCategory.Builder clearUserId() {
      userId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'category' field.
      * @return The value.
      */
    public java.lang.CharSequence getCategory() {
      return category;
    }

    /**
      * Sets the value of the 'category' field.
      * @param value The value of 'category'.
      * @return This builder.
      */
    public eu.ideata.streaming.core.UserInfoWithCategory.Builder setCategory(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.category = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'category' field has been set.
      * @return True if the 'category' field has been set, false otherwise.
      */
    public boolean hasCategory() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'category' field.
      * @return This builder.
      */
    public eu.ideata.streaming.core.UserInfoWithCategory.Builder clearCategory() {
      category = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public eu.ideata.streaming.core.UserInfoWithCategory.Builder setTimestamp(long value) {
      validate(fields()[2], value);
      this.timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public eu.ideata.streaming.core.UserInfoWithCategory.Builder clearTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'booleanFlag' field.
      * @return The value.
      */
    public java.lang.Boolean getBooleanFlag() {
      return booleanFlag;
    }

    /**
      * Sets the value of the 'booleanFlag' field.
      * @param value The value of 'booleanFlag'.
      * @return This builder.
      */
    public eu.ideata.streaming.core.UserInfoWithCategory.Builder setBooleanFlag(boolean value) {
      validate(fields()[3], value);
      this.booleanFlag = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'booleanFlag' field has been set.
      * @return True if the 'booleanFlag' field has been set, false otherwise.
      */
    public boolean hasBooleanFlag() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'booleanFlag' field.
      * @return This builder.
      */
    public eu.ideata.streaming.core.UserInfoWithCategory.Builder clearBooleanFlag() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'subCategory' field.
      * @return The value.
      */
    public java.lang.CharSequence getSubCategory() {
      return subCategory;
    }

    /**
      * Sets the value of the 'subCategory' field.
      * @param value The value of 'subCategory'.
      * @return This builder.
      */
    public eu.ideata.streaming.core.UserInfoWithCategory.Builder setSubCategory(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.subCategory = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'subCategory' field has been set.
      * @return True if the 'subCategory' field has been set, false otherwise.
      */
    public boolean hasSubCategory() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'subCategory' field.
      * @return This builder.
      */
    public eu.ideata.streaming.core.UserInfoWithCategory.Builder clearSubCategory() {
      subCategory = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'someValue' field.
      * @return The value.
      */
    public java.lang.Float getSomeValue() {
      return someValue;
    }

    /**
      * Sets the value of the 'someValue' field.
      * @param value The value of 'someValue'.
      * @return This builder.
      */
    public eu.ideata.streaming.core.UserInfoWithCategory.Builder setSomeValue(float value) {
      validate(fields()[5], value);
      this.someValue = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'someValue' field has been set.
      * @return True if the 'someValue' field has been set, false otherwise.
      */
    public boolean hasSomeValue() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'someValue' field.
      * @return This builder.
      */
    public eu.ideata.streaming.core.UserInfoWithCategory.Builder clearSomeValue() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'intValue' field.
      * @return The value.
      */
    public java.lang.Integer getIntValue() {
      return intValue;
    }

    /**
      * Sets the value of the 'intValue' field.
      * @param value The value of 'intValue'.
      * @return This builder.
      */
    public eu.ideata.streaming.core.UserInfoWithCategory.Builder setIntValue(int value) {
      validate(fields()[6], value);
      this.intValue = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'intValue' field has been set.
      * @return True if the 'intValue' field has been set, false otherwise.
      */
    public boolean hasIntValue() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'intValue' field.
      * @return This builder.
      */
    public eu.ideata.streaming.core.UserInfoWithCategory.Builder clearIntValue() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'updated' field.
      * @return The value.
      */
    public java.lang.Long getUpdated() {
      return updated;
    }

    /**
      * Sets the value of the 'updated' field.
      * @param value The value of 'updated'.
      * @return This builder.
      */
    public eu.ideata.streaming.core.UserInfoWithCategory.Builder setUpdated(long value) {
      validate(fields()[7], value);
      this.updated = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'updated' field has been set.
      * @return True if the 'updated' field has been set, false otherwise.
      */
    public boolean hasUpdated() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'updated' field.
      * @return This builder.
      */
    public eu.ideata.streaming.core.UserInfoWithCategory.Builder clearUpdated() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'streamingSource' field.
      * @return The value.
      */
    public java.lang.CharSequence getStreamingSource() {
      return streamingSource;
    }

    /**
      * Sets the value of the 'streamingSource' field.
      * @param value The value of 'streamingSource'.
      * @return This builder.
      */
    public eu.ideata.streaming.core.UserInfoWithCategory.Builder setStreamingSource(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.streamingSource = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'streamingSource' field has been set.
      * @return True if the 'streamingSource' field has been set, false otherwise.
      */
    public boolean hasStreamingSource() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'streamingSource' field.
      * @return This builder.
      */
    public eu.ideata.streaming.core.UserInfoWithCategory.Builder clearStreamingSource() {
      streamingSource = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'readTimeStamp' field.
      * @return The value.
      */
    public java.lang.Long getReadTimeStamp() {
      return readTimeStamp;
    }

    /**
      * Sets the value of the 'readTimeStamp' field.
      * @param value The value of 'readTimeStamp'.
      * @return This builder.
      */
    public eu.ideata.streaming.core.UserInfoWithCategory.Builder setReadTimeStamp(java.lang.Long value) {
      validate(fields()[9], value);
      this.readTimeStamp = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'readTimeStamp' field has been set.
      * @return True if the 'readTimeStamp' field has been set, false otherwise.
      */
    public boolean hasReadTimeStamp() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'readTimeStamp' field.
      * @return This builder.
      */
    public eu.ideata.streaming.core.UserInfoWithCategory.Builder clearReadTimeStamp() {
      readTimeStamp = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    public UserInfoWithCategory build() {
      try {
        UserInfoWithCategory record = new UserInfoWithCategory();
        record.userId = fieldSetFlags()[0] ? this.userId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.category = fieldSetFlags()[1] ? this.category : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (java.lang.Long) defaultValue(fields()[2]);
        record.booleanFlag = fieldSetFlags()[3] ? this.booleanFlag : (java.lang.Boolean) defaultValue(fields()[3]);
        record.subCategory = fieldSetFlags()[4] ? this.subCategory : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.someValue = fieldSetFlags()[5] ? this.someValue : (java.lang.Float) defaultValue(fields()[5]);
        record.intValue = fieldSetFlags()[6] ? this.intValue : (java.lang.Integer) defaultValue(fields()[6]);
        record.updated = fieldSetFlags()[7] ? this.updated : (java.lang.Long) defaultValue(fields()[7]);
        record.streamingSource = fieldSetFlags()[8] ? this.streamingSource : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.readTimeStamp = fieldSetFlags()[9] ? this.readTimeStamp : (java.lang.Long) defaultValue(fields()[9]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
